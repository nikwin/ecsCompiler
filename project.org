* Top Priority
** DONE The shortcut for class-specific components 4/4T
** DONE Function thing that automatically figures out the name
** DONE Also uniqueness of defined functions would be nice.
** DONE Make a shortcut for the xComponent: ~() + --- ~xComponent. Make it something like ~~~ in the file to do both
   DEADLINE: <2018-12-06 Thu>
** DONE Be able to make ad-hoc subclassese through csvs alone /2T
   DEADLINE: <2018-11-20 Tue>
   - ie; imagine a csv called unitOption_settler.csv
   - This should take the class here as unitOption, thus saving me the need of making an ecs file unitOption_settler.ecs
   - This way I can still separate the csvs as I want without making a bunch of largely blank ecs files.
** DONE Support conditionals in the component signature in ecs files. /3D
   DEADLINE: <2019-06-10 Mon>
** DONE Automatic inheritance for components when possible 4/2D
   DEADLINE: <2019-11-20 Wed>
   - [X] Resolve this when resolving the inheritance
     - [X] Check for a --- ~ signature
     - [X] Mark the basefile as the thing to reference
     - [X] Reference the basefile for the thing to inherit
     - [X] If nothing in the basefile, check to see if there exists a class of the base name to inherit
     - [X] Calculate the class through that inheritance.
   - [X] Be able to set an override for this. Use a !noinherit in the class signature
** DONE By making the params into a different file, I can dramatically speed up build times in many cases. 6/4D
   DEADLINE: <2019-11-19 Tue>
   - [X] Separate out the csv parsing into a different function
   - [X] Figure out how to tie the pieces together
   - [X] Update the makefile
** TODO Make the .. thing in the compiler that auto-expands the component
   - Be able to do x..y and then check through all of the components for y and replace with x.component.y
** TODO Also make macro definitions
** TODO Make a reference to all of the parameters the object takes.
  - Use this to verify csv headers.
  - Use this to minimize the size of the save files by stripping all the superfluous parameters.
** TODO Spell checking
** Support JSON instead of CSV
** Static check to make sure that you don't refer to anything that doesn't exist in the CSVs.
** Similarly to extending lists, support decorating the function of the parent class.
** Also list the defined classes that are not referenced by other pieces
** Inline the args so that you don't have to deep clone them with json.
   - On the other hand, this does let me change run time behaviour easily by updating the source args
   - I really don't like that though
** Be able to add conditionals to a component and have it return undefined if they are not all met.

* Debt
** Add support for a step to process the csv files
** Support adding arguments to the components in the ecs files
   - ie; healthComponent(health=1)
   - refactor the goal entity through that.
   - This way we can have multiple of a component in an entity
** Check to ensure that a value belongs to a certain class
   - eg; check to make sure that sourceKey is actually a source
   - Maybe you can do this at the csv level.
** Auto-generate csv columns from an ecs file
   - support a dynamic keyword so that you can mark fields in the ecs file that should not show up in the csv
   - Also try the other way around - generate the ecs file from the csv by figuring out columns and put all new columns into a new component
   - Both of these are meant to be used once to create the file. The file should be hand-edited from that point on.
** Define function signatures in base classes and ensure that derived classes use the same signature
** Support a shared reference so that all towers of a certain key can point to a single component
** Look into making conditions more consistent.
** Define necessary pieces for a component and return undefined if they are not present
** Generate statistics
   - The number of individual pieces
   - Number of complex pieces
** Show abstract base classes with only one child
** Shortcut for text substitution as naming conventions are typically strict
   - Alternately support for static checking naming conventions
** Shortcut for referencing allArgs
** Check to see if some definitions are very similar to each other
** Refactor out the line check
** Refactor the commands
** Make a tool that shows you the arguments that an ecs object can take.
** Be able to auto-generate gen_csv rows by having something of a particular key format be referred to by something else.
* Rejected
** Make the definitions in a file that are not the first be inaccessible outside that file
** Make namespaces for the functions to reduce chance of overlap
